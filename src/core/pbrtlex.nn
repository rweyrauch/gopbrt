

/#[^\n]*/				{ /* comment */ }

/[-+]*[0-9]*\.[0-9]*/	{ value, _ := strconv.ParseFloat(yylex.Text(), 64); lval.value = value; return NUMBER }
/[-+]*[0-9]*/			{ value, _ := strconv.ParseFloat(yylex.Text(), 64); lval.value = value; return NUMBER }

/\[/				{ return LBRACK }
/\]/				{ return RBRACK }

/Accelerator/		{ return ACCELERATOR }
/ActiveTransform/	{ return ACTIVETRANSFORM }
/All/				{ return ALL }
/AreaLightSource/	{ return AREALIGHTSOURCE }
/AttributeBegin/ 	{ return ATTRIBUTEBEGIN }
/AttributeEnd/ 		{ return ATTRIBUTEEND }
/Camera/			{ return CAMERA }
/ConcatTransform/ 	{ return CONCATTRANSFORM }
/CoordinateSystem/	{ return COORDINATESYSTEM }
/CoordSysTransform/	{ return COORDSYSTRANSFORM }
/EndTime/			{ return ENDTIME }
/Film/				{ return FILM }
/Identity/			{ return IDENTITY }
/Include/			{ return INCLUDE }
/LightSource/ 		{ return LIGHTSOURCE }
/LookAt/			{ return LOOKAT }
/MakeNamedMaterial/	{ return MAKENAMEDMATERIAL }
/Material/			{ return MATERIAL }
/NamedMaterial/		{ return NAMEDMATERIAL }
/ObjectBegin/ 		{ return OBJECTBEGIN }
/ObjectEnd/ 		{ return OBJECTEND }
/ObjectInstance/ 	{ return OBJECTINSTANCE }
/PixelFilter/		{ return PIXELFILTER }
/Renderer/			{ return RENDERER }
/ReverseOrientation/ { return REVERSEORIENTATION }
/Rotate/			{ return ROTATE	}
/Sampler/			{ return SAMPLER }
/Scale/ 			{ return SCALE }
/Shape/				{ return SHAPE }
/StartTime/			{ return STARTTIME }
/SurfaceIntegrator/	{ return SURFACEINTEGRATOR }
/Texture/			{ return TEXTURE }
/TransformBegin/	{ return TRANSFORMBEGIN	}
/TransformEnd/		{ return TRANSFORMEND }
/TransformTimes/	{ return TRANSFORMTIMES }
/Transform/			{ return TRANSFORM }
/Translate/		    { return TRANSLATE }
/Volume/			{ return VOLUME }
/VolumeIntegrator/	{ return VOLUMEINTEGRATOR }
/WorldBegin/ 		{ return WORLDBEGIN }
/WorldEnd/			{ return WORLDEND }

/[a-zA-Z_][a-zA-Z0-9_]*/		{ lval.id = yylex.Text(); return IDENTIFIER }
/"(\\.|[^"\\])*"/				{ lval.id = strings.TrimRight(strings.TrimLeft(yylex.Text(), "\""), "\""); return STRING }
/[ \r\n\t]+/					{ /* white-space do nothing */ }

/./				    { fmt.Printf("Unexpected character: %s  Line: %d  Column: %d\n", yylex.Text(), yylex.Line(), yylex.Column()) }

//

/*
	gopbrt

	Port of pbrt v2.0.0 by Matt Pharr and Greg Humphreys to the go language.
    pbrt source code Copyright(c) 1998-2012 Matt Pharr and Greg Humphreys.

	The MIT License (MIT)
	Copyright (c) 2016 Rick Weyrauch

	Permission is hereby granted, free of charge, to any person obtaining a copy of
	this software and associated documentation files (the "Software"), to deal in
	the Software without restriction, including without limitation the rights to
	use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
	of the Software, and to permit persons to whom the Software is furnished to do
	so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
package core

import (	
	"fmt"
	"strconv"
)

func init() {
	/* (this has to be in a func or lex doesn't write it out to final file)
	 *
	 * If this file is not pbrtlex.nn, it was generated from pbrtlex.nn and
	 * should not be edited directly.
	 *
	 */
}
